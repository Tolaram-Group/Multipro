CREATE OR REPLACE PROCEDURE ORION10.ZPROC_BANK_RECO (P_HEAD_SYS_ID NUMBER) AS
FOUND_ID NUMBER;
MATCH_ID NUMBER;
D_SYS_ID NUMBER;
D_ACCOUNT NUMBER;
D_BANK VARCHAR2(100);
D_RECO_FROM_DT DATE;
D_PRV_MATCH_H_SYS_ID NUMBER;
BEGIN
    --change
--hello 
    SELECT ZSH_ACCOUNT_NUMBER,ZSH_BANK,ZSH_FROM_DT
       INTO D_ACCOUNT,D_BANK,D_RECO_FROM_DT
      FROM Z_STMPT_HEAD WHERE ZSH_SYS_ID = P_HEAD_SYS_ID;
      
       -- add opening unmatched item
    
            INSERT INTO ZORION_LEDGER_DETAILS 
                       (ZLD_SYS_ID, ZSH_ZLD_SYS_ID, ZLD_DATE, ZLD_VALUE, ZLD_CHANNEL, ZLD_DETAILS, ZLD_AMOUNT, ZLD_TYPE,ZLD_FLEX_01)
            SELECT ZLD_SYS_ID.NEXTVAL, P_HEAD_SYS_ID, ZLD_DATE, ZLD_VALUE, ZLD_CHANNEL, ZLD_DETAILS, ZLD_AMOUNT, ZLD_TYPE,'OPENING'
              FROM Z_STMPT_HEAD_OPENING,ZORION_LEDGER_DETAILS_OPENING
            WHERE ZSH_SYS_ID = ZSH_ZLD_SYS_ID 
                AND ZSH_ACCOUNT_NUMBER = D_ACCOUNT AND ZSH_BANK =  D_BANK AND ZSH_DOC_DT = D_RECO_FROM_DT AND NVL(ZLD_MATCHED,0) = 0;
                
            INSERT INTO ZBANK_STMPT_DETAILS
                       (ZBD_SYS_ID, ZSH_ZBD_SYS_ID, ZBD_DATE, ZBD_VALUE, ZBD_CHANNEL, ZBD_DETAILS, ZBD_AMOUNT, ZBD_TYPE,ZBD_FLEX_01)
         
      

    BEGIN   
        SELECT ZSH_SYS_ID INTO D_PRV_MATCH_H_SYS_ID
          FROM
                (SELECT * FROM Z_STMPT_HEAD WHERE  ZSH_ACCOUNT_NUMBER = D_ACCOUNT AND ZSH_BANK = D_BANK AND ZSH_SYS_ID <> P_HEAD_SYS_ID
                ORDER BY ZSH_CR_DT DESC)
            WHERE ROWNUM = 1;
         
        
        -- UPDATE ALREADY MATCHED ENTRIES BANK
        FOR I IN (SELECT * FROM ZBANK_STMPT_DETAILS  WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID)
        LOOP
            FOR J IN (SELECT * FROM ZBANK_STMPT_DETAILS A 
                           WHERE ZSH_ZBD_SYS_ID = D_PRV_MATCH_H_SYS_ID
                               --AND ZBD_DATE = I.ZBD_DATE 
                               AND ZBD_VALUE = I.ZBD_VALUE 
                               AND NVL(ZBD_CHANNEL,0) = NVL(I.ZBD_CHANNEL,0) AND ZBD_DETAILS = I.ZBD_DETAILS 
                               AND ZBD_AMOUNT = I.ZBD_AMOUNT AND ZBD_TYPE = I.ZBD_TYPE --AND NVL(ZBD_MATCHED,0) = 1  COMMENTED TO UPDATE PREVIOUS GENERATED TRANSACTION IN FLEX_02-- TO BLOCK SECOND TIME GENERATION OF FINANCE ENTRY FOR SAME
                           )
            LOOP
                IF  NVL(J.ZBD_MATCHED,0) = 1 THEN
                    UPDATE ZBANK_STMPT_DETAILS SET ZBD_MATCHED = 1,ZBD_REMARKS = 'PREVIOUS MATCHED '||REPLACE(J.ZBD_REMARKS,'PREVIOUS MATCHED'),ZSD_MATCH_ID = J.ZSD_MATCH_ID
                     WHERE ZBD_SYS_ID = I.ZBD_SYS_ID;
                ELSE
                    UPDATE ZBANK_STMPT_DETAILS SET ZBD_FLEX_02 = J.ZBD_FLEX_02
                     WHERE ZBD_SYS_ID = I.ZBD_SYS_ID;
                END IF;
            END LOOP;
        END LOOP;
        
         -- UPDATE ALREADY MATCHED ENTRIES LEDGER
        FOR I IN (SELECT * FROM ZORION_LEDGER_DETAILS  WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID)
        LOOP
            FOR J IN (SELECT * FROM ZORION_LEDGER_DETAILS A 
                           WHERE ZSH_ZLD_SYS_ID = D_PRV_MATCH_H_SYS_ID
                               AND ZLD_DATE = I.ZLD_DATE AND ZLD_VALUE = I.ZLD_VALUE 
                               AND nvl(ZLD_CHANNEL,' ') = nvl(I.ZLD_CHANNEL,' ') AND ZLD_DETAILS = I.ZLD_DETAILS 
                               AND ZLD_AMOUNT = I.ZLD_AMOUNT AND ZLD_TYPE = I.ZLD_TYPE AND NVL(ZLD_MATCHED,0) = 1)
            LOOP
                UPDATE ZORION_LEDGER_DETAILS SET ZLD_MATCHED = 1,ZLD_REMARKS = 'PREVIOUS MATCHED '||REPLACE(J.ZLD_REMARKS,'PREVIOUS MATCHED'),ZLD_MATCH_ID = J.ZLD_MATCH_ID
                 WHERE ZLD_SYS_ID = I.ZLD_SYS_ID;
            END LOOP;
        END LOOP;
            
    EXCEPTION WHEN NO_DATA_FOUND THEN
           D_PRV_MATCH_H_SYS_ID := NULL;
    END;
     
     

    -- REMOVE REVERSAL ENTRY BANK SAME AMOUNT,DESC,DATE
    FOR I IN (SELECT TRUNC(ZBD_DATE) ZBD_DATE,ZBD_DETAILS,SUM(DECODE(ZBD_TYPE,'D',ZBD_AMOUNT,0)) DR_AMT,SUM(DECODE(ZBD_TYPE,'C',ZBD_AMOUNT,0)) CR_AMT
                     FROM ZBANK_STMPT_DETAILS WHERE  ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_DATE IS NOT NULL AND NVL(ZBD_MATCHED,0) = 0
                    GROUP BY TRUNC(ZBD_DATE),ZBD_DETAILS,ZBD_AMOUNT
                    HAVING SUM(DECODE(ZBD_TYPE,'D',ZBD_AMOUNT,0))-SUM(DECODE(ZBD_TYPE,'C',ZBD_AMOUNT,0)) = 0)
    LOOP
        SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL;
        
         UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1 ,ZBD_REMARKS = 'REVERSE',ZSD_MATCH_ID = MATCH_ID
            WHERE TRUNC(ZBD_DATE) = I.ZBD_DATE AND ZBD_DETAILS = I.ZBD_DETAILS AND ZBD_AMOUNT = I.DR_AMT;
    END LOOP;
    
    -- REMOVE REVERSAL BANK ENTRY ODD ENTRIES SAME AMOUNT,DESC,DATE
    FOR I IN (SELECT * FROM ZBANK_STMPT_DETAILS WHERE  ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_DATE IS NOT NULL AND ZBD_TYPE = 'C' 
                     AND NVL(ZBD_MATCHED,0) = 0
                    ORDER BY ZBD_DATE,ZBD_AMOUNT)
    LOOP
        BEGIN
            SELECT ZBD_SYS_ID INTO D_SYS_ID
              FROM 
                (SELECT * 
                  FROM ZBANK_STMPT_DETAILS
                WHERE  ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_DATE IS NOT NULL AND ZBD_TYPE = 'D' AND NVL(ZBD_MATCHED,0) = 0
                    AND  TRUNC(ZBD_DATE) = TRUNC(I.ZBD_DATE) AND ZBD_DETAILS = I.ZBD_DETAILS AND ZBD_AMOUNT = I.ZBD_AMOUNT
                    ORDER BY ZBD_DATE,ZBD_AMOUNT)
             WHERE ROWNUM = 1;
            SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL;
            
            UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1 ,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS = 'REVERSE 2'
            WHERE ZBD_SYS_ID = D_SYS_ID;
            
            UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS = 'REVERSE 2'
             WHERE ZBD_SYS_ID = I.ZBD_SYS_ID;
        EXCEPTION WHEN NO_DATA_FOUND THEN
            D_SYS_ID := NULL;
        END;
    END LOOP;
    
    -- REMOVE REVERSAL ENTRY LEDGER updated on 29-10-2019 to allow rev jv
    
    FOR I IN (SELECT * FROM ZORION_LEDGER_DETAILS WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'D' AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_VALUE LIKE 'JVLREV%')
    LOOP
        BEGIN
        
            SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL;
            
            SELECT ZLD_SYS_ID INTO FOUND_ID FROM ZORION_LEDGER_DETAILS WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'C' 
                 AND  I.ZLD_DETAILS  LIKE  '%'||SUBSTR(ZLD_VALUE,1,6)||'%'||SUBSTR(ZLD_VALUE,7)||'%'
                 AND ZLD_AMOUNT = I.ZLD_AMOUNT AND NVL(ZLD_MATCHED,0) = 0;
            
             UPDATE ZORION_LEDGER_DETAILS SET ZLD_MATCHED = 1,ZLD_REMARKS='REVERSE',ZLD_MATCH_ID = MATCH_ID
             WHERE  ZLD_SYS_ID = FOUND_ID;
             
             UPDATE ZORION_LEDGER_DETAILS SET ZLD_MATCHED = 1,ZLD_REMARKS='REVERSE',ZLD_MATCH_ID = MATCH_ID
             WHERE  ZLD_SYS_ID = I.ZLD_SYS_ID;
        EXCEPTION WHEN NO_DATA_FOUND THEN
                FOUND_ID := NULL;
             WHEN TOO_MANY_ROWS THEN
                FOUND_ID := NULL;
        END;
    END LOOP;
    
    FOUND_ID := NULL;
    
      FOR I IN (SELECT * FROM ZORION_LEDGER_DETAILS WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'C' AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_VALUE LIKE 'JVLREV%')
    LOOP
        BEGIN
            SELECT ZLD_SYS_ID INTO FOUND_ID FROM ZORION_LEDGER_DETAILS WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'D'
             AND  I.ZLD_DETAILS  LIKE  '%'||SUBSTR(ZLD_VALUE,1,6)||'%'||SUBSTR(ZLD_VALUE,7)||'%'
             AND ZLD_AMOUNT = I.ZLD_AMOUNT AND NVL(ZLD_MATCHED,0) = 0;
            
            SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL; 
            
             UPDATE ZORION_LEDGER_DETAILS SET ZLD_MATCHED = 1,ZLD_REMARKS='REVERSE',ZLD_MATCH_ID = MATCH_ID
             WHERE  ZLD_SYS_ID = FOUND_ID;
             
             UPDATE ZORION_LEDGER_DETAILS SET ZLD_MATCHED = 1,ZLD_REMARKS='REVERSE',ZLD_MATCH_ID = MATCH_ID
             WHERE  ZLD_SYS_ID = I.ZLD_SYS_ID;
        EXCEPTION WHEN NO_DATA_FOUND THEN
            FOUND_ID := NULL;
        WHEN TOO_MANY_ROWS THEN
            FOUND_ID := NULL;           
        END;
    END LOOP;
    
    FOUND_ID := NULL;

    -- BANK CREDIT AND LEDGER DEBIT
    FOR I IN (SELECT ZBD_AMOUNT,SUM(BANK),SUM(LEDGER)
                     FROM
                     (SELECT ZBD_AMOUNT,COUNT(1) BANK,0 LEDGER FROM zbank_stmpt_details WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_TYPE = 'C' AND NVL(ZBD_MATCHED,0) = 0
                     GROUP BY ZBD_AMOUNT
                     UNION ALL
                     SELECT ZLD_AMOUNT,0,COUNT(1) FROM zorion_ledger_details WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'D' AND NVL(ZLD_MATCHED,0) = 0
                     GROUP BY ZLD_AMOUNT)
                     GROUP BY ZBD_AMOUNT
                     HAVING SUM(BANK) = SUM(LEDGER))
    LOOP
        SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL; 
    
        UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1 ,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS='BANK CREDIT AND LEDGER DEBIT'
        WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_AMOUNT = I.ZBD_AMOUNT AND NVL(ZBD_MATCHED,0) = 0 AND ZBD_TYPE = 'C';
        
        UPDATE zorion_ledger_details SET ZLD_MATCHED = 1,ZLD_MATCH_ID = MATCH_ID,ZLD_REMARKS='BANK CREDIT AND LEDGER DEBIT'
         WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_AMOUNT = I.ZBD_AMOUNT AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_TYPE = 'D' ;
    END LOOP;
    
    FOUND_ID := NULL;
    -- BANK DEBIT AND LEDGER CREDIT
    FOR I IN (SELECT ZBD_AMOUNT,SUM(BANK),SUM(LEDGER)
                     FROM
                     (SELECT ZBD_AMOUNT,COUNT(1) BANK,0 LEDGER FROM zbank_stmpt_details WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_TYPE = 'D' AND NVL(ZBD_MATCHED,0) = 0
                     GROUP BY ZBD_AMOUNT
                     UNION ALL
                     SELECT ZLD_AMOUNT,0,COUNT(1) FROM zorion_ledger_details WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'C' AND NVL(ZLD_MATCHED,0) = 0
                     GROUP BY ZLD_AMOUNT)
                     GROUP BY ZBD_AMOUNT
                     HAVING SUM(BANK) = SUM(LEDGER))
    LOOP
        SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL; 
    
        UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1  ,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS='BANK DEBIT AND LEDGER CREDIT'
        WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_AMOUNT = I.ZBD_AMOUNT AND NVL(ZBD_MATCHED,0) = 0 AND ZBD_TYPE = 'D';
        
        UPDATE zorion_ledger_details SET ZLD_MATCHED = 1,ZLD_MATCH_ID = MATCH_ID,ZLD_REMARKS='BANK DEBIT AND LEDGER CREDIT'
         WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_AMOUNT = I.ZBD_AMOUNT  AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_TYPE = 'C' ;
    END LOOP;
    
    --COMMIT;
    FOUND_ID := NULL;
    -- KNOCK OFF SYSTEM GENERATED ENTRIES 18/07/2019
    FOR I IN (SELECT * FROM zbank_stmpt_details WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_TYPE = 'D' AND NVL(ZBD_MATCHED,0) = 0  AND ZBD_FLEX_02 IS NOT NULL
                   ORDER BY ZBD_DATE)
    LOOP
        BEGIN
            SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL; 
        
            SELECT ZLD_SYS_ID INTO FOUND_ID
              FROM  zorion_ledger_details
             WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'C' AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_AMOUNT = I.ZBD_AMOUNT
                 AND (ZLD_VALUE = I.ZBD_FLEX_02);
            
            UPDATE zorion_ledger_details SET ZLD_MATCHED = 1,ZLD_MATCH_ID = MATCH_ID,ZLD_REMARKS='BANK DEBIT AND LEDGER CREDIT SYSTEM GENERATED ENTRY'
             WHERE  ZLD_SYS_ID = FOUND_ID;
                 
            UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1 ,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS='BANK DEBIT AND LEDGER CREDIT SYSTEM GENERATED ENTRY'
             WHERE ZBD_SYS_ID = I.ZBD_SYS_ID;
               
        EXCEPTION WHEN NO_DATA_FOUND THEN 
            NULL;
            WHEN TOO_MANY_ROWS THEN 
            NULL;
        END;
    END LOOP;
    
    --COMMIT;
    FOUND_ID := NULL;
    -- BANK DEBIT AND LEDGER CREDIT CHARGES KNOCK OFF FIFO
    /*FOR I IN (SELECT * FROM zbank_stmpt_details WHERE ZSH_ZBD_SYS_ID = P_HEAD_SYS_ID AND ZBD_TYPE = 'D' AND NVL(ZBD_MATCHED,0) = 0 
                 AND (ZBD_DETAILS LIKE '%LC%CHRG%' OR ZBD_DETAILS LIKE '%AP/%' OR ZBD_DETAILS LIKE 'STAMP DUTY CHARGE%') ORDER BY ZBD_DATE)
    LOOP
        BEGIN
            SELECT zseq_bank_stmt_match.NEXTVAL INTO MATCH_ID FROM DUAL; 
        
            SELECT ZLD_SYS_ID INTO FOUND_ID
            FROM
            (SELECT ZLD_SYS_ID 
              FROM  zorion_ledger_details
             WHERE ZSH_ZLD_SYS_ID = P_HEAD_SYS_ID AND ZLD_TYPE = 'C' AND NVL(ZLD_MATCHED,0) = 0 AND ZLD_AMOUNT = I.ZBD_AMOUNT
                 AND (ZLD_DETAILS LIKE 'BEING STAMP DUTY%' OR ZLD_VALUE = I.ZBD_FLEX_02) ORDER BY ZLD_DATE) 
             WHERE ROWNUM = 1;
            
            UPDATE zorion_ledger_details SET ZLD_MATCHED = 1,ZLD_MATCH_ID = MATCH_ID,ZLD_REMARKS='BANK DEBIT AND LEDGER CREDIT CHARGES KNOCK OFF FIFO'
             WHERE  ZLD_SYS_ID = FOUND_ID;
                 
            UPDATE zbank_stmpt_details SET ZBD_MATCHED = 1 ,ZSD_MATCH_ID = MATCH_ID,ZBD_REMARKS='BANK DEBIT AND LEDGER CREDIT CHARGES KNOCK OFF FIFO'
             WHERE ZBD_SYS_ID = I.ZBD_SYS_ID;
               
        EXCEPTION WHEN NO_DATA_FOUND THEN 
            NULL;
        END;
    END LOOP;*/
    
    
    COMMIT;
    
END;
/
